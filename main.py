import base64
import datetime
import json
from io import BytesIO

import openai
import requests
import telebot
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove

from helpers import block, get_channel_link, block2hrs, generate_jwt_token
from keyboards import markup, markup1, markup2, markup3, markup4, markup5, markup6, markup7, markup8, markup9, markup10, \
    markup11, markup12, admin, markup13, markup14, admin2, markup16, admin0, admin4, admin6, admin7, markup18, admin9
import yookassa
from config import *
import psycopg2
from telebot.types import Message
from telebot.types import LabeledPrice
bot = telebot.TeleBot(TOKEN)
import payment
import time
import random


try:
    conn = psycopg2.connect(
        host=DB_HOST,
        database=DB_NAME,
        user=DB_USER,
        password=DB_PASSWORD,
        options=f'-c search_path={schema_name}'
    )
    print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
except (Exception, psycopg2.DatabaseError) as error:
    print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL:", error)

def gpt_key():
    cursor = conn.cursor()
    key_query = "SELECT key FROM main_keys ORDER BY RANDOM() LIMIT 1;"
    cursor.execute(key_query)
    random_key = cursor.fetchone()

    from openai import OpenAI

    client = OpenAI(api_key=random_key[0])
    return client


@bot.message_handler(func=lambda message: message.chat.id == int(MAIN_CHANEL))
def handle_channel_message(message):
    if message.text.startswith('/gpt'):
        chat_id = message.chat.id
        query = message.text.replace('/gpt', '')  # –£–¥–∞–ª–µ–Ω–∏–µ "/gpt" –∏ –ø—Ä–æ–±–µ–ª–æ–≤
        msg = bot.reply_to(message,
                           "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ , —è –∏—â—É –æ—Ç–≤–µ—Çüòå")
        client = gpt_key()

        stream = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": "–ö–∞–∫ –¥–µ–ª–∞ –±—Ä–∞—Ç?"}],
            stream=True,
        )
        for chunk in stream:
            if chunk.choices[0].delta.content is not None:
                print(chunk.choices[0].delta.content, end="")

        messages = [
            {"role": "user", "content": query},
        ]

        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo", messages=messages
        )
        text = response['choices'][0]['message']['content']
        response_text = text

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ç–æ—Ç –∂–µ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç

        bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=msg.message_id,
            text=response_text)
    elif message.text.startswith('/img'):

        msg = bot.reply_to(message,
                           "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ , —è —Å–æ–∑–¥–∞—é –∫–∞—Ä—Ç–∏–Ω—Éüòå")
        try:
            response = openai.Image.create(
                prompt=message.text,
                model="image-alpha-001",
                size="512x512",
                response_format="b64_json"
            )

            for index, image_dict in enumerate(response["data"]):
                image_data = base64.b64decode(image_dict["b64_json"])
            bot.send_photo(
                chat_id=message.chat.id,
                photo=image_data,
            )
        except:
            bot.send_message(chat_id=message.chat.id, text='Dall-e –Ω–µ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å')
@bot.message_handler(commands=['start'])
def handle_start(message):

    user_id = message.from_user.id

    result = message.text.split()[-1]
    cursor = conn.cursor()
    cursor.execute(
        "SELECT user_id FROM referral_system WHERE user_id = %s", (str(user_id),)
    )
    existing_user = cursor.fetchone()
    cursor.execute('''
                        INSERT INTO main_tg_user (telegram_id,name,balance)
                        VALUES (%s,%s,%s)
                        ON CONFLICT DO NOTHING;
                    ''', (user_id,'ChatGPT','5000'))
    conn.commit()

    if str(result) == str("payment"):
        user_id = message.from_user.id
        bot.send_message(user_id,
                         "–ö–∞–∂–¥—ã–π —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å —Ç—Ä–∞—Ç–∏—Ç —Ç–æ–∫–µ–Ω—ã OpenAI \n–¢–æ–∫–µ–Ω—ã —ç—Ç–æ —Ç–æ–ø–ª–∏–≤–æ –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ \n–°—Ç–æ–∏–º–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –µ–≥–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ \n1 —Å–∏–º–≤–æ–ª —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ 1 —Ç–æ–∫–µ–Ω \n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∏—Ö –ø–æ–¥ —Å–≤–æ–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏\n"
                         "üëá–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—Éüëá", reply_markup=markup18)
    elif result.startswith('img'):
        print(result)
        id = result.replace('img-', '')
        cursor = conn.cursor()
        cursor.execute('SELECT response_image FROM main_midjourney WHERE id = %s', (id,))
        channel_usernames = cursor.fetchone()  # Fetch a single row


        if channel_usernames:
            response_image_url = channel_usernames[0]  # Assuming the response_image URL is in the first column

            response = requests.get(response_image_url)
            if response.status_code == 200:
                bot.send_photo(message.chat.id, photo=response.content)
            else:
                # Handle the case when the image couldn't be fetched
                bot.send_message(message.chat.id, "Failed to fetch the image.")
        else:
            bot.send_message(message.chat.id, "Image not found.")
    else:
        print(result)
        if existing_user:
            pass
        else:
            if user_id == result:
                result = None
                cursor.execute(
                    "INSERT INTO referral_system (user_id, is_referred, invited_by) VALUES (%s, %s, %s)",
                    (str(user_id), True, result)
                )
            else:

                try:
                    int(result)
                    cursor.execute(
                        "INSERT INTO referral_system (user_id, is_referred, invited_by) VALUES (%s, %s, %s)",
                        (str(user_id), True, result)
                    )
                    cursor.execute(
                        "UPDATE main_tg_user SET balance = balance + %s WHERE telegram_id = %s",
                        (3000, result)
                    )
                    bot.send_message(result, f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç–æ–∫–µ–Ω—ã –∑–∞ –¥—Ä—É–≥–∞ {bot.get_chat(user_id).username}")
                except:
                    result = None
                    cursor.execute(
                        "INSERT INTO referral_system (user_id, is_referred, invited_by) VALUES (%s, %s, %s)",
                        (str(user_id), True, result)
                    )

            conn.commit()
        if block(message):
            pass
        elif block2hrs(message):
            pass
        else:
            bot.send_message(user_id, "ü§ñ –ü—Ä–∏–≤–µ—Ç, {}! –Ø –±–æ—Ç ChatGPT –∏ DALL-E! –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã."
                                          "–ë–æ—Ç –∏–Ω–æ–≥–¥–∞ –º–æ–∂–µ—Ç –≥—Ä—É–∑–∏—Ç—å –æ—Ç–≤–µ—Ç "
                                          "–≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç. –í—Å–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ OpenAI! "
                                          "–°–æ–≤–µ—Ç—ã –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:\n\n"
                                          "‚Äì –ó–∞–¥–∞–≤–∞–π—Ç–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã, —Ä–∞—Å–ø–∏—Å—ã–≤–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–µ–µ.\n"
                                          "‚Äì –ù–µ –ø–∏—à–∏—Ç–µ –µ—Ä—É–Ω–¥—É –∏–Ω–∞—á–µ –æ–¥–µ—Ä–∂–∏—Ç–µ –µ—ë –∂–µ –≤ –æ—Ç–≤–µ—Ç.\n\n"
                                          "–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤/–∑–∞–ø—Ä–æ—Å–æ–≤:\n\n"
                                          "~ –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 7 * 8?\n"
                                          "~ –ö–æ–≥–¥–∞ –Ω–∞—á–∞–ª–∞—Å—å –í—Ç–æ—Ä–∞—è –ú–∏—Ä–æ–≤–∞—è?\n"
                                          "~ –ù–∞–ø–∏—à–∏ –∫–æ–¥ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –Ω–∞ Python\n"
                                          "~ –ù–∞–ø–∏—à–∏ —Å–æ—á–∏–Ω–µ–Ω–∏–µ –∫–∞–∫ —è –ø—Ä–æ–≤–µ–ª –ª–µ—Ç–æ\n"
                             "~ /img –ú–∏–ª—ã–π –∫–æ—Ç–∏–∫\n\n".format(message.from_user.first_name), reply_markup=markup1)



@bot.message_handler(commands=['admin'])
def admin_command(message):

    user_id = message.from_user.id  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ–±—ä–µ–∫—Ç–∞ message
    user_info = bot.get_chat_member(your_channel_username_admin, user_id)
    if user_info.status in ["member", "administrator", "creator"]:
        bot.send_message(user_id, "–í—ã —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ –∏ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /admin.", reply_markup=admin0)
    else:
        bot.reply_to(message, "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /admin.")


@bot.callback_query_handler(func=lambda call: call.data == "redact_text")
def handle_subscribed_callback(call):
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç", reply_markup=admin7)
@bot.callback_query_handler(func=lambda call: call.data == "Keys")
def handle_subscribed_callback(call):
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"–î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å?", reply_markup=admin9
    )

@bot.callback_query_handler(func=lambda call: call.data == "add_key")
def handle_subscribed_callback(call):
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á")
    bot.register_next_step_handler(call.message, add_key)

def add_key(message: Message):
    cur = conn.cursor()

    # –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
    new_key_value = message.text  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–ª—é—á–∞

    # SQL-–∑–∞–ø—Ä–æ—Å INSERT –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞
    insert_query = "INSERT INTO main_keys (key) VALUES (%s);"
    data_to_insert = (new_key_value,)

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    cur.execute(insert_query, data_to_insert)

    # –§–∏–∫—Å–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn.commit()

    bot.send_message(message.chat.id,
                     "–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω", reply_markup=admin0)
@bot.callback_query_handler(func=lambda call: call.data == "back4")
def handle_subscribed_callback(call):
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"–í—ã–±–∏—Ä–∞–π—Ç–µ", reply_markup=admin0)
@bot.callback_query_handler(func=lambda call: call.data == "back5")
def handle_subscribed_callback(call):
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"–†–µ–∫–ª–∞–º–∞ –∫–∞–Ω–∞–ª–æ–≤", reply_markup=admin)
@bot.callback_query_handler(func=lambda call: call.data == "back7")
def handle_subscribed_callback(call):
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º—É\n–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–∞–Ω–∞–ª–µ, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∞ —Ç–∞–∫–∂–µ –≤ –∫–∞–Ω–∞–ª–µ –¥–æ–ª–∂–µ–Ω–∞ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", reply_markup=admin)
@bot.callback_query_handler(func=lambda call: call.data == "back8")
def handle_subscribed_callback(call):
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω–Ω–∏–∫–æ–≤", reply_markup=admin4)


@bot.callback_query_handler(func=lambda call: call.data == "new_text_rub")
def handle_subscribed_callback(call):
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç")
    bot.register_next_step_handler(call.message, make_rub_text)

def make_rub_text(message: Message):
    try:
        with open('data.json', 'r') as file:
            data = json.load(file)
    except FileNotFoundError:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –µ—â–µ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
        data = {}

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª–æ–≤–∞—Ä–µ
    data['rub'] = ""
    data['rub'] = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª
    with open('data.json', 'w') as file:
        json.dump(data, file)
    bot.send_message(message.chat.id,
                     "–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ",reply_markup=admin0)

@bot.callback_query_handler(func=lambda call: call.data == "new_text_qrypt")
def handle_subscribed_callback(call):
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç")
    bot.register_next_step_handler(call.message, make_qrypt_text)

def make_qrypt_text(message: Message):
    try:
        with open('data.json', 'r') as file:
            data = json.load(file)
    except FileNotFoundError:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –µ—â–µ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
        data = {}

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª–æ–≤–∞—Ä–µ
    data['qript'] = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª
    with open('data.json', 'w') as file:
        json.dump(data, file)
    bot.send_message(message.chat.id,
                     "–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ",reply_markup=admin0)

@bot.callback_query_handler(func=lambda call: call.data == "new_text_qrypt")
def handle_subscribed_callback(call):
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç")

@bot.callback_query_handler(func=lambda call: call.data == "Reklam")
def handle_subscribed_callback(call):
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"–†–µ–∫–ª–∞–º–∞ –∫–∞–Ω–∞–ª–æ–≤", reply_markup=admin)

@bot.callback_query_handler(func=lambda call: call.data == "prices")
def handle_subscribed_callback(call):
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω–Ω–∏–∫–æ–≤", reply_markup=admin4)

@bot.callback_query_handler(func=lambda call: call.data == "new_price")
def handle_subscribed_callback(call):
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ü–µ–Ω–Ω–∏–∫. –ë–æ–ª—å—à–∞—è –ø—Ä–æ—Å—å–±–∞ –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω–æ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã—Ö —Ü–µ–Ω–Ω–∏–∫–æ–≤ –∏–Ω–∞—á–µ –±–æ—Ç –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–¥–∞–ª–∏—Ç –æ–±–∞", reply_markup=admin6)

@bot.callback_query_handler(func=lambda call: call.data == "no_price")
def handle_subscribed_callback(call):
    user_id = call.from_user.id
    cursor = conn.cursor()
    cursor.execute('SELECT group_type FROM prices')
    promo_chanel_records = cursor.fetchall()
    cursor.execute('SELECT money FROM prices')
    promo_chanel_records1 = cursor.fetchall()
    cursor.execute('SELECT tokens FROM prices')
    promo_chanel_records2 = cursor.fetchall()


    markup = types.InlineKeyboardMarkup(row_width=1)
    for record in range(len(promo_chanel_records)):
        group_code = promo_chanel_records[record][0]
        money = promo_chanel_records1[record][0]
        tokens = promo_chanel_records2[record][0]
        delete_button = types.InlineKeyboardButton(text=f"–¢–∏–ø:{group_code} \n–¶–µ–Ω–∞:{money}\n–¢–æ–∫–µ–Ω—ã:{tokens}",
                                                   callback_data=f"delete1:{group_code}:{money}:{tokens}")
        markup.add(delete_button)
    btn = types.InlineKeyboardButton("‚óÄÔ∏è–ù–∞–∑–∞–¥", callback_data="back8")
    markup.add(btn)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ —É–¥–∞–ª–∏—Ç—å",reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('delete1:'))
def delete_record_callback(call):
    group_code_to_delete = call.data.split(':')[1]
    money= call.data.split(':')[2]
    tokens = call.data.split(':')[3]
    cursor = conn.cursor()
    cursor.execute('''
            DELETE FROM prices WHERE group_type = %s AND money = %s AND tokens = %s
        ''', (group_code_to_delete, money, tokens))
    conn.commit()

    bot.answer_callback_query(call.id, text=f"–¶–µ–Ω–Ω–∏–∫ —É–¥–∞–ª—ë–Ω")
    bot.delete_message(call.message.chat.id, call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data == "delete_key")
def handle_subscribed_callback(call):
    user_id = call.from_user.id
    cursor = conn.cursor()
    cursor.execute('SELECT key FROM main_keys')
    keys = cursor.fetchall()


    markup = types.InlineKeyboardMarkup(row_width=1)
    for key in keys:

        delete_button = types.InlineKeyboardButton(
            text=f"–ö–ª—é—á: {key[0]}",
            callback_data=f"delete12:{(key[0])}"
        )
        markup.add(delete_button)

    btn = types.InlineKeyboardButton("‚óÄÔ∏è–ù–∞–∑–∞–¥", callback_data="back4")
    markup.add(btn)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('delete12:'))
def delete_record_callback(call):
    key = call.data.split(':')[1]

    cursor = conn.cursor()

    cursor.execute('''
                DELETE FROM main_keys WHERE key = %s 
            ''', (key,))
    conn.commit()

    bot.answer_callback_query(call.id, text=f"–¶–µ–Ω–Ω–∏–∫ —É–¥–∞–ª—ë–Ω")
    bot.delete_message(call.message.chat.id, call.message.message_id)
@bot.callback_query_handler(func=lambda call: call.data == "new_price_rub")
def handle_subscribed_callback(call):
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö \n–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–∞—è —Ü–µ–Ω–∞ - 60 —Ä—É–±")

    bot.register_next_step_handler(call.message, make_price)

def make_price(message: Message):

    bot.send_message(message.chat.id,
                     "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ —Ç–æ–∫–µ–Ω–æ–≤")
    bot.register_next_step_handler(message, make_price1, message.text)

def make_price1(message, text):
    cursor = conn.cursor()
    cursor.execute('''
            INSERT INTO prices (group_type, money, tokens)
            VALUES (%s, %s, %s)
        ''', ('rub', text, message.text))

    conn.commit()

    bot.send_message(message.chat.id,
                     "–°–ø–∞—Å–∏–±–æ",
                     reply_markup=admin0)

@bot.callback_query_handler(func=lambda call: call.data == "new_price_qrypt")
def handle_subscribed_callback(call):
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö \n–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–∞—è —Ü–µ–Ω–∞ - 5$")

    bot.register_next_step_handler(call.message, make_price2)

def make_price2(message: Message):

    bot.send_message(message.chat.id,
                     "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ —Ç–æ–∫–µ–Ω–æ–≤")
    bot.register_next_step_handler(message, make_price22, message.text)

def make_price22(message, text):
    cursor = conn.cursor()
    cursor.execute('''
            INSERT INTO prices (group_type, money, tokens)
            VALUES (%s, %s, %s)
        ''', ('qrypto', text, message.text))

    conn.commit()

    bot.send_message(message.chat.id,
                     "–°–ø–∞—Å–∏–±–æ",
                     reply_markup=admin0)

@bot.callback_query_handler(func=lambda call: call.data == "subscribed")
def handle_subscribed_callback(call):

    cursor = conn.cursor()
    cursor.execute('SELECT group_code FROM groups WHERE group_type = %s', ('reklam1',))
    channel_usernames = cursor.fetchall()
    user_id = call.from_user.id

    # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –≥—Ä—É–ø–ø—ã reklam1
    is_subscribed_to_all = True

    for channel_username in channel_usernames:
        user_info = bot.get_chat_member(channel_username, user_id)
        if user_info.status not in ["member", "administrator", "creator"]:
            is_subscribed_to_all = False
            break

    if is_subscribed_to_all:
        bot.send_message(user_id, "ü§ñ –ü—Ä–∏–≤–µ—Ç, {}! –Ø –±–æ—Ç ChatGPT –∏ DALL-E! –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã."
                                  "–ë–æ—Ç –∏–Ω–æ–≥–¥–∞ –º–æ–∂–µ—Ç –≥—Ä—É–∑–∏—Ç—å –æ—Ç–≤–µ—Ç "
                                  "–≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç. –í—Å–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ OpenAI! "
                                  "–°–æ–≤–µ—Ç—ã –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:\n\n"
                                  "‚Äì –ó–∞–¥–∞–≤–∞–π—Ç–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã, —Ä–∞—Å–ø–∏—Å—ã–≤–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–µ–µ.\n"
                                  "‚Äì –ù–µ –ø–∏—à–∏—Ç–µ –µ—Ä—É–Ω–¥—É –∏–Ω–∞—á–µ –æ–¥–µ—Ä–∂–∏—Ç–µ –µ—ë –∂–µ –≤ –æ—Ç–≤–µ—Ç.\n\n"
                                  "–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤/–∑–∞–ø—Ä–æ—Å–æ–≤:\n\n"
                                  "~ –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 7 * 8?\n"
                                  "~ –ö–æ–≥–¥–∞ –Ω–∞—á–∞–ª–∞—Å—å –í—Ç–æ—Ä–∞—è –ú–∏—Ä–æ–≤–∞—è?\n"
                                  "~ –ù–∞–ø–∏—à–∏ –∫–æ–¥ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –Ω–∞ Python\n"
                                  "~ –ù–∞–ø–∏—à–∏ —Å–æ—á–∏–Ω–µ–Ω–∏–µ –∫–∞–∫ —è –ø—Ä–æ–≤–µ–ª –ª–µ—Ç–æ\n"
                         "~ /img –ú–∏–ª—ã–π –∫–æ—Ç–∏–∫\n\n".format(call.from_user.first_name),
                                       reply_markup=markup1)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
        markup = InlineKeyboardMarkup()
        for channel_username in channel_usernames:
            subscribe_button = InlineKeyboardButton(text=str(bot.get_chat(channel_username).title),
                                                    url=str(get_channel_link(channel_username)))  # cc—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã
            markup.add(subscribe_button)
        name = call.from_user.first_name
        subscribe_btn1 = InlineKeyboardButton("‚úÖ–ü–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="subscribed")
        markup.add(subscribe_btn1)
        bot.send_message(user_id, "–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω", reply_markup=ReplyKeyboardRemove())
        bot.send_message(user_id, f"–•–µ–π, {name}, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã.", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "subscribed1")
def handle_subscribed_callback(call):

    cursor = conn.cursor()
    cursor.execute('SELECT group_code FROM groups WHERE group_type = %s', ('reklam2',))
    channel_usernames = cursor.fetchall()
    user_id = call.from_user.id

    # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –≥—Ä—É–ø–ø—ã reklam1
    is_subscribed_to_all = True

    for channel_username in channel_usernames:
        user_info = bot.get_chat_member(channel_username, user_id)
        if user_info.status not in ["member", "administrator", "creator"]:
            is_subscribed_to_all = False
            break

    if is_subscribed_to_all:
        bot.send_message(user_id, "ü§ñ –ü—Ä–∏–≤–µ—Ç, {}! –Ø –±–æ—Ç ChatGPT –∏ DALL-E! –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã."
                                  "–ë–æ—Ç –∏–Ω–æ–≥–¥–∞ –º–æ–∂–µ—Ç –≥—Ä—É–∑–∏—Ç—å –æ—Ç–≤–µ—Ç "
                                  "–≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç. –í—Å–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ OpenAI! "
                                  "–°–æ–≤–µ—Ç—ã –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:\n\n"
                                  "‚Äì –ó–∞–¥–∞–≤–∞–π—Ç–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã, —Ä–∞—Å–ø–∏—Å—ã–≤–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–µ–µ.\n"
                                  "‚Äì –ù–µ –ø–∏—à–∏—Ç–µ –µ—Ä—É–Ω–¥—É –∏–Ω–∞—á–µ –æ–¥–µ—Ä–∂–∏—Ç–µ –µ—ë –∂–µ –≤ –æ—Ç–≤–µ—Ç.\n\n"
                                  "–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤/–∑–∞–ø—Ä–æ—Å–æ–≤:\n\n"
                                  "~ –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 7 * 8?\n"
                                  "~ –ö–æ–≥–¥–∞ –Ω–∞—á–∞–ª–∞—Å—å –í—Ç–æ—Ä–∞—è –ú–∏—Ä–æ–≤–∞—è?\n"
                                  "~ –ù–∞–ø–∏—à–∏ –∫–æ–¥ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –Ω–∞ Python\n"
                                  "~ –ù–∞–ø–∏—à–∏ —Å–æ—á–∏–Ω–µ–Ω–∏–µ –∫–∞–∫ —è –ø—Ä–æ–≤–µ–ª –ª–µ—Ç–æ\n"
                         "~ /img –ú–∏–ª—ã–π –∫–æ—Ç–∏–∫\n\n".format(call.from_user.first_name),
                                       reply_markup=markup1)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
        markup = InlineKeyboardMarkup()
        for channel_username in channel_usernames:
            subscribe_button = InlineKeyboardButton(text=str(bot.get_chat(channel_username).title),
                                                    url=str(get_channel_link(channel_username)))  # cc—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã
            markup.add(subscribe_button)

        subscribe_btn1 = InlineKeyboardButton("‚úÖ–ü–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="subscribed1")
        markup.add(subscribe_btn1)
        name = call.from_user.first_name
        bot.send_message(user_id, "–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω", reply_markup=ReplyKeyboardRemove())
        bot.send_message(user_id, f"–•–µ–π, {name}, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –¥—Ä—É–≥–∏–µ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "subscribed2")
def handle_subscribed_callback(call):

    cursor = conn.cursor()
    cursor.execute('SELECT group_code FROM groups WHERE group_type = %s', ('promo_chanel',))
    channel_usernames = cursor.fetchall()
    user_id = call.from_user.id

    # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –≥—Ä—É–ø–ø—ã reklam1
    how_many_subs_got = 0

    for channel_username in channel_usernames:
        user_info = bot.get_chat_member(channel_username, user_id)
        if user_info.status in ["member", "administrator", "creator"]:
            how_many_subs_got += 1

    if how_many_subs_got == 0:
        bot.send_message(user_id, "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∏ –Ω–∞ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª :(".format(call.from_user.first_name),
                                       reply_markup=markup12)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
        cursor = conn.cursor()
        # –í—ã–ø–æ–ª–Ω—è–µ–º SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è tokens –≤ —Ç–∞–±–ª–∏—Ü–µ Tg_User
        # –°—É–º–º–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ tokens —Å –¥–æ–±–∞–≤–ª—è–µ–º—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º tokens_to_add
        cursor.execute("UPDATE main_tg_user SET balance = balance + %s WHERE telegram_id = %s", (3000 * how_many_subs_got, user_id))
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn.commit()
        name = call.from_user.first_name

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"{name}, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω—ã –±–æ–Ω—É—Å —Ç–æ–∫–µ–Ω—ã", reply_markup=markup14)

@bot.callback_query_handler(func=lambda call: call.data == "Bonus chanel")
def handle_subscribed_callback(call):
    user_id = call.from_user.id  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ–±—ä–µ–∫—Ç–∞ message
    bot.send_message(call.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º—É\n–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–∞–Ω–∞–ª–µ, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∞ —Ç–∞–∫–∂–µ –≤ –∫–∞–Ω–∞–ª–µ –¥–æ–ª–∂–µ–Ω–∞ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞",reply_markup=admin2)

@bot.callback_query_handler(func=lambda call: call.data == "delite_chanel")
def handle_subscribed_callback(call):
    user_id = call.from_user.id
    cursor = conn.cursor()
    cursor.execute('SELECT group_code FROM groups')
    promo_chanel_records = cursor.fetchall()


    markup = types.InlineKeyboardMarkup(row_width=1)
    for record in promo_chanel_records:
        group_code = record[0]

        delete_button = types.InlineKeyboardButton(text=f"–£–¥–∞–ª–∏—Ç—å {bot.get_chat(group_code).title }", callback_data=f"delete:{group_code}")
        markup.add(delete_button)
    btn = types.InlineKeyboardButton("‚óÄÔ∏è–ù–∞–∑–∞–¥", callback_data="back5")
    markup.add(btn)
    bot.send_message(user_id, "–°–ø–∏—Å–æ–∫ —Ä–µ–∫–ª–∞–º–∏—Ä—É—â–∏—Ö—Å—è –∫–∞–Ω–∞–ª–æ–≤:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('delete:'))
def delete_record_callback(call):
    group_code_to_delete = call.data.split(':')[1]
    cursor = conn.cursor()
    cursor.execute('DELETE FROM groups WHERE group_code = %s', (group_code_to_delete,))
    conn.commit()

    bot.answer_callback_query(call.id, text=f"–ó–∞–ø–∏—Å—å —Å –∫–æ–¥–æ–º {group_code_to_delete} —É–¥–∞–ª–µ–Ω–∞")
    bot.delete_message(call.message.chat.id, call.message.message_id)



@bot.callback_query_handler(func=lambda call: call.data == "make_promo")
def handle_subscribed_callback(call):
    bot.send_message(call.from_user.id,
                     "–í–≤–µ–¥–∏—Ç–µ id –∫–∞–Ω–∞–ª–∞")

    bot.register_next_step_handler(call.message, handle_next_message)

def handle_next_message(message: Message):
    cursor = conn.cursor()
    cursor.execute('INSERT INTO groups (group_code, group_type) VALUES (%s, %s)', (message.text, 'promo_chanel'))
    conn.commit()
    try:
        user_info = bot.get_chat_member(message.text, '6137197109')

    except:
        bot.send_message(message.chat.id,
                         "–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞! –î–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞", )
    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ, —Ç–µ–ø–µ—Ä—å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –¥–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å–Ω—É—é –≤–∞–ª—é—Ç—É", reply_markup=admin)

@bot.callback_query_handler(func=lambda call: call.data == "make_first_block")
def handle_subscribed_callback(call):
    bot.send_message(call.from_user.id,
                     "–í–≤–µ–¥–∏—Ç–µ id –∫–∞–Ω–∞–ª–∞")
    bot.register_next_step_handler(call.message, handle_next_message1)

def handle_next_message1(message: Message):
    cursor = conn.cursor()
    cursor.execute('INSERT INTO groups (group_code, group_type) VALUES (%s, %s)', (message.text, 'reklam1'))
    conn.commit()
    try:
        user_info = bot.get_chat_member(message.text, '6137197109')

    except:
        bot.send_message(message.chat.id,
                         "–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞! –î–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞", )
    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ, —Ç–µ–ø–µ—Ä—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –æ–±—è–∑–∞–Ω –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∏ –Ω–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª", reply_markup=admin)


@bot.callback_query_handler(func=lambda call: call.data == "make_second_block")
def handle_subscribed_callback(call):
    bot.send_message(call.from_user.id,
                     "–í–≤–µ–¥–∏—Ç–µ id –∫–∞–Ω–∞–ª–∞")
    bot.register_next_step_handler(call.message, handle_next_message2)


def handle_next_message2(message: Message):
    cursor = conn.cursor()
    cursor.execute('INSERT INTO groups (group_code, group_type) VALUES (%s, %s)', (message.text, 'reklam2'))
    conn.commit()
    try:
        user_info = bot.get_chat_member(message.text, '6137197109')

    except:
        bot.send_message(message.chat.id,
                         "–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞! –î–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞", )
    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ, —Ç–µ–ø–µ—Ä—å —á–µ—Ä–µ–∑ –¥–≤–∞ —á–∞—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –æ–±—è–∑–∞–Ω –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∏ –Ω–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª", reply_markup=admin)
@bot.callback_query_handler(func=lambda call: call.data == "back")
def handle_subscribed_callback(call):
    user_id = call.from_user.id
    bot.send_message(user_id, "ü§ñ –ü—Ä–∏–≤–µ—Ç, {}! –Ø –±–æ—Ç ChatGPT –∏ DALL-E! –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã."
                              "–ë–æ—Ç –∏–Ω–æ–≥–¥–∞ –º–æ–∂–µ—Ç –≥—Ä—É–∑–∏—Ç—å –æ—Ç–≤–µ—Ç "
                              "–≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç. –í—Å–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ OpenAI! "
                              "–°–æ–≤–µ—Ç—ã –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:\n\n"
                              "‚Äì –ó–∞–¥–∞–≤–∞–π—Ç–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã, —Ä–∞—Å–ø–∏—Å—ã–≤–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–µ–µ.\n"
                              "‚Äì –ù–µ –ø–∏—à–∏—Ç–µ –µ—Ä—É–Ω–¥—É –∏–Ω–∞—á–µ –æ–¥–µ—Ä–∂–∏—Ç–µ –µ—ë –∂–µ –≤ –æ—Ç–≤–µ—Ç.\n\n"
                              "–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤/–∑–∞–ø—Ä–æ—Å–æ–≤:\n\n"
                              "~ –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 7 * 8?\n"
                              "~ –ö–æ–≥–¥–∞ –Ω–∞—á–∞–ª–∞—Å—å –í—Ç–æ—Ä–∞—è –ú–∏—Ä–æ–≤–∞—è?\n"
                              "~ –ù–∞–ø–∏—à–∏ –∫–æ–¥ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –Ω–∞ Python\n"
                              "~ –ù–∞–ø–∏—à–∏ —Å–æ—á–∏–Ω–µ–Ω–∏–µ –∫–∞–∫ —è –ø—Ä–æ–≤–µ–ª –ª–µ—Ç–æ\n"
                     "~ /img –ú–∏–ª—ã–π –∫–æ—Ç–∏–∫\n\n".format(call.from_user.first_name),
                     reply_markup=markup1)

@bot.callback_query_handler(func=lambda call: call.data == "back1")
def handle_subscribed_callback(call):
    user_id = call.from_user.id
    user_name = call.from_user.username
    name = call.from_user.first_name

    cursor = conn.cursor()
    cursor.execute("SELECT balance FROM main_tg_user WHERE telegram_id = %s", (user_id,))
    result = str(cursor.fetchone()[0])
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM main_tg_user WHERE telegram_id = %s", (user_id,))
    conn.commit()
    result1 = str(cursor.fetchone()[0])
    cursor = conn.cursor()
    cursor.execute(
        "SELECT COUNT(*) AS count_invites FROM referral_system WHERE invited_by = %s",
        (user_id,)
    )
    result2 = cursor.fetchone()[0]
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"üë§ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}\n"
                     f"‚îú –í–∞—à —é–∑–µ—Ä–Ω–µ–π–º: {user_name}\n"
                     f"‚îî –í–∞—à id: {user_id}\n\n"
                     f"üëõ–ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤: {result}\n\n"
                     f"üë•–î—Ä—É–∑–µ–π –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {result2}\n\n"
                     f"üó£–†–æ–ª—å: {result1}\n",
                     reply_markup=markup4)

@bot.callback_query_handler(func=lambda call: call.data == "–°—Ç–µ–Ω–¥–∞–ø –∫–æ–º–∏–∫" or call.data == "–ñ—É—Ä–Ω–∞–ª–∏—Å—Ç" or call.data == "–®–µ—Ñ-–ø–æ–≤–∞—Ä" or call.data == "–°—Ç–∏–ª–∏—Å—Ç" or call.data == "–ú–∞—Ç–µ–º–∞—Ç–∏–∫" or call.data == "–ü—å—è–Ω—ã–π" or call.data == "–õ—É—á—à–∏–π –¥—Ä—É–≥" or call.data == "–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫" or call.data == "–†–∞—Å—Å–∫–∞–∑—á–∏–∫" or call.data == "–ú–æ—Ç–∏–≤–∞—Ç–æ—Ä" or call.data == "–°–ø–æ—Ä—â–∏–∫" or call.data == "–°—Ü–µ–Ω–∞—Ä–∏—Å—Ç" or call.data == "–ü–æ—ç—Ç" or call.data == "–§–∏–ª–æ—Å–æ—Ñ")
def handle_subscribed_callback(call):
    user_id = call.from_user.id
    user_name = call.from_user.username
    name = call.from_user.first_name

    cursor = conn.cursor()
    cursor.execute("UPDATE main_tg_user SET name = %s WHERE telegram_id = %s;", (call.data, user_id))
    conn.commit()
    cursor.execute("SELECT balance FROM main_tg_user WHERE telegram_id = %s", (user_id,))
    result = str(cursor.fetchone()[0])
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM main_tg_user WHERE telegram_id = %s", (user_id,))
    conn.commit()
    result1 = str(cursor.fetchone()[0])
    cursor = conn.cursor()
    cursor.execute(
        "SELECT COUNT(*) AS count_invites FROM referral_system WHERE invited_by = %s",
        (user_id,)
    )
    result2 = cursor.fetchone()[0]
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"üë§ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}\n"
             f"‚îú –í–∞—à —é–∑–µ—Ä–Ω–µ–π–º: {user_name}\n"
             f"‚îî –í–∞—à id: {user_id}\n\n"
             f"üëõ–ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤: {result}\n\n"
             f"üë•–î—Ä—É–∑–µ–π –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {result2}\n\n"
             f"üó£–†–æ–ª—å: {result1}\n",
        reply_markup=markup4)



@bot.callback_query_handler(func=lambda call: call.data == "–ë–µ–∑ —Ä–æ–ª–∏")
def handle_subscribed_callback(call):
    user_id = call.from_user.id
    user_name = call.from_user.username
    name = call.from_user.first_name

    cursor = conn.cursor()
    cursor.execute("UPDATE main_tg_user SET name = %s WHERE telegram_id = %s;", ('ChatGPT', user_id))
    conn.commit()
    cursor.execute("SELECT balance FROM main_tg_user WHERE telegram_id = %s", (user_id,))
    result = str(cursor.fetchone()[0])
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM main_tg_user WHERE telegram_id = %s", (user_id,))
    conn.commit()
    result1 = str(cursor.fetchone()[0])
    cursor = conn.cursor()
    cursor.execute(
        "SELECT COUNT(*) AS count_invites FROM referral_system WHERE invited_by = %s",
        (user_id,)
    )
    result2 = cursor.fetchone()[0]
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"üë§ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}\n"
             f"‚îú –í–∞—à —é–∑–µ—Ä–Ω–µ–π–º: {user_name}\n"
             f"‚îî –í–∞—à id: {user_id}\n\n"
             f"üëõ–ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤: {result}\n\n"
             f"üë•–î—Ä—É–∑–µ–π –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {result2}\n\n"
             f"üó£–†–æ–ª—å: {result1}\n",
        reply_markup=markup4)

@bot.callback_query_handler(func=lambda call: call.data == "tokens")
def handle_subscribed_callback(call):
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="–ö–∞–∂–¥—ã–π —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å —Ç—Ä–∞—Ç–∏—Ç —Ç–æ–∫–µ–Ω—ã OpenAI \n–¢–æ–∫–µ–Ω—ã —ç—Ç–æ —Ç–æ–ø–ª–∏–≤–æ –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ \n–°—Ç–æ–∏–º–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –µ–≥–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ \n1 —Å–∏–º–≤–æ–ª —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ 1 —Ç–æ–∫–µ–Ω \n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∏—Ö –ø–æ–¥ —Å–≤–æ–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏\n"
            "üëá–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—Éüëá", reply_markup=markup10)


@bot.callback_query_handler(func=lambda call: call.data == "bonus")
def handle_subscribed_callback(call):
    cursor = conn.cursor()
    cursor.execute('SELECT group_code FROM groups WHERE group_type = %s', ('promo_chanel',))
    channel_usernames = cursor.fetchall()
    user_id = call.from_user.id
    is_subscribed_to_all = True
    for channel_username in channel_usernames:
        user_info = bot.get_chat_member(channel_username, user_id)
        if user_info.status not in ["member", "administrator", "creator"]:
            is_subscribed_to_all = False
            break

    if is_subscribed_to_all:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–¢—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª –≤—Å–µ –±–æ–Ω—É—Å—ã", reply_markup=markup12)
    else:
        markup = InlineKeyboardMarkup()

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è

        for channel_username in channel_usernames:
            subscribe_button = InlineKeyboardButton(text=str(bot.get_chat(channel_username).title),
                                                    url=str(get_channel_link(channel_username)))  # cc—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã
            markup.add(subscribe_button)
        subscribe_btn1 = InlineKeyboardButton("‚úÖ–ü–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="subscribed2")
        markup.add(subscribe_btn1)


        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å —Ç–æ–∫–µ–Ω–∞ 3000, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "friend")
def handle_subscribed_callback(call):
    user_id = call.from_user.id
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –∑–∞ –∫–∞–∂–¥–æ–≥–æ 3000 —Ç–æ–∫–µ–Ω–æ–≤.\n–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π: \nhttps://t.me/GPT_DALLY_BOT?start={user_id}"
            # "\n–ê–∫—Ç–∏–≤–Ω—ã—Ö –¥—Ä—É–∑–µ–π: 0"
            , reply_markup=markup12)

@bot.message_handler(func=lambda message: message.text == 'üë•–î—Ä—É–∑—å—è')
def handle_subscribed_callback(message):
    user_id = message.from_user.id
    if block(message):
        pass
    elif block2hrs(message):
        pass
    else:
            bot.send_message(
                user_id,
                f"–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –∑–∞ –∫–∞–∂–¥–æ–≥–æ 3000 —Ç–æ–∫–µ–Ω–æ–≤.\n–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π: \nhttps://t.me/GPT_DALLY_BOT?start={user_id}"
                    , reply_markup=markup14)

@bot.callback_query_handler(func=lambda call: call.data == "role")
def handle_subscribed_callback(call):
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ä–æ–ª—å –¥–ª—è –±–æ—Ç–∞", reply_markup=markup11)
@bot.callback_query_handler(func=lambda call: call.data == "back2")
def handle_subscribed_callback(call):

    user_id = call.from_user.id
    bot.send_message(user_id,
                     "‚úçÔ∏è –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å\n\n"
                     "üí∏ –ö—É–ø–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É \"–ö—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã\" \n\n"
                     "üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏—Ç—å 3000 —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–µ \"–î—Ä—É–∑—å—è\"\n\n"
                     "üéÅ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª —Å–ø–æ–Ω—Å–æ—Ä–∞, –ø–æ–ª—É—á–∏–≤ 3000 —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–µ \"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã\"\n\n"
                     "üëõ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–µ \"–ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤\"\n\n",
                     reply_markup=markup2)

@bot.callback_query_handler(func=lambda call: call.data == "Crypto")
def handle_subscribed_callback(call):
    cursor = conn.cursor()
    cursor.execute('SELECT money FROM prices WHERE group_type = %s', ("qrypto",))
    channel_usernames = cursor.fetchall()
    cursor.execute('SELECT tokens FROM prices WHERE group_type = %s', ("qrypto",))
    channel_usernames1 = cursor.fetchall()
    markup = InlineKeyboardMarkup()
    for channel_username in range(len(channel_usernames)):
        money = channel_usernames[channel_username][0]
        tokens = channel_usernames1[channel_username][0]
        subscribe_button = InlineKeyboardButton(text=str(channel_usernames[channel_username][0]) + '$',
                                                callback_data=f"delete7:{money}:{tokens}")  # cc—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã
        markup.add(subscribe_button)

    subscribe_btn1 = InlineKeyboardButton("‚óÄÔ∏è–ù–∞–∑–∞–¥", callback_data="valute")
    markup.add(subscribe_btn1)
    with open('data.json', 'r') as file:
        data = json.load(file)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=data['qript'],
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('delete7:'))
def delete_record_callback(call):
        money = int(call.data.split(':')[1].replace("üéØ", ""))
        tokens = int(call.data.split(':')[2])
        chat_id = call.message.chat.id
        headers = {
            'x-api-key': API_QRIPT,
            'Authorization': 'Bearer ' + generate_jwt_token(),  # –î–æ–±–∞–≤–ª—è–µ–º JWT-—Ç–æ–∫–µ–Ω –∫ –∑–∞–≥–æ–ª–æ–≤–∫—É Authorization
        }
        print(chat_id)
        data = {

            'order_id': str(chat_id),  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å chat_id
            'price_amount': int(money),  # –°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            'price_currency': 'USD',  # –í–∞–ª—é—Ç–∞ –æ–ø–ª–∞—Ç—ã, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            'pay_currency': 'USDTTRC20'  # –í–∞–ª—é—Ç–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
        }
        response = requests.post('https://api.nowpayments.io/v1/payment', headers=headers, json=data)

        data1 = response.json()


        markup17 = InlineKeyboardMarkup()
        markup17.row(InlineKeyboardButton("üîÑ–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_paymnent:{data1['payment_id']}"))

        subscribe_btn1 = InlineKeyboardButton("‚óÄÔ∏è–ù–∞–∑–∞–¥", callback_data="valute")
        markup17.add(subscribe_btn1)
        print(data1)
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            # f"–û–ø–ª–∞—Ç–∏—Ç–µ {tokens} —Ç–æ–∫–µ–Ω–æ–≤. –î–∞–ª–µ–µ ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û‚ùó‚ùóÔ∏è‚ùóÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üîÑ–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞\n–í–∞—à –∞–¥—Ä–µ—Å—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã: " +
            # data1['pay_address']
            text=f"""
–ü–æ–∫—É–ø–∫–∞ : {tokens} —Ç–æ–∫–µ–Ω–æ–≤ 
–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: USDTTRC20
–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã(–≤–º–µ—Å—Ç–µ —Å –∫–æ–º–∏—Å—Å–∏–µ–π): {data1['pay_amount']} USD


–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ãüëá: 
<code>{data1['pay_address']}</code>

‚ùóÔ∏è–í–Ω–∏–º–∞–Ω–∏–µ‚ùóÔ∏è
–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –ø–ª–∞—Ç—ë–∂ –±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω.

–ü–ª–∞—Ç–µ–∂–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –¥–æ 5–º–∏–Ω—É—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üîÑ–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É" —Å–ø—É—Å—Ç—è 2-3–º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.
                    """,
            reply_markup=markup17, parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: call.data == "RUB")
def handle_subscribed_callback(call):
    cursor = conn.cursor()
    cursor.execute('SELECT money FROM prices WHERE group_type = %s', ("rub",))
    channel_usernames = cursor.fetchall()
    cursor.execute('SELECT tokens FROM prices WHERE group_type = %s', ("rub",))
    channel_usernames1 = cursor.fetchall()
    markup = InlineKeyboardMarkup()
    for channel_username in range(len(channel_usernames)):
        money=channel_usernames[channel_username][0]
        tokens=channel_usernames1[channel_username][0]
        subscribe_button = InlineKeyboardButton(text=str(channel_usernames[channel_username][0]) + ' —Ä—É–±–ª–µ–π', callback_data= f"delete4:{money}:{tokens}")  # cc—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã
        markup.add(subscribe_button)

    subscribe_btn1 = InlineKeyboardButton("‚óÄÔ∏è–ù–∞–∑–∞–¥", callback_data="valute")
    markup.add(subscribe_btn1)
    with open('data.json', 'r') as file:
        data = json.load(file)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=data['rub'],
        reply_markup=markup
    )




@bot.callback_query_handler(func=lambda call: call.data.startswith('delete4:'))
def delete_record_callback(call):
        money = int(call.data.split(':')[1].replace("üéØ", ""))
        tokens = int(call.data.split(':')[2])
        title = '–û–ø–ª–∞—Ç–∞'
        description = f'{tokens} —Ç–æ–∫–µ–Ω–æ–≤üöÄ1111 1111 1111 1026, 12/22, CVC 000üéØ'
        # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
        invoice_payload = money  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        # –ü—Ä–æ–≤–∞–π–¥–µ—Ä—Å–∫–∏–π —Ç–æ–∫–µ–Ω YooKassa
        provider_token = YOOKASSA_SECRET_KEY  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á YooKassa
        # –í–∞–ª—é—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞
        currency = 'RUB'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É –Ω—É–∂–Ω—É—é –≤–∞–ª—é—Ç—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, 'RUB' –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ä—É–±–ª–µ–π

        price = int(money)*100

        prices = [LabeledPrice(label='Working Time Machine', amount=str(price))]
        bot.send_invoice(
            chat_id=call.from_user.id,
            title=title,
            description=description,
            invoice_payload=invoice_payload,
            provider_token=provider_token,
            currency=currency,
            prices=prices,
        )



@bot.callback_query_handler(func=lambda call: call.data == "recommendations")
def handle_subscribed_callback(call):
    if call.message.text == """–°–æ–≤–µ—Ç—É—é –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å –æ–±—â–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π.

1. –°–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∑–∞–¥–∞–≤–∞—Ç—å –º–Ω–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, —Ç–∞–∫ –∂–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ —è —Ä–∞–±–æ—Ç–∞—é –±—ã—Å—Ç—Ä–µ–µ

2. –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã –∏ —è—Å–Ω—ã: –∑–∞–¥–∞–≤–∞—è –≤–æ–ø—Ä–æ—Å, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –º–Ω–µ –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ.

3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –≥—Ä–∞–º–º–∞—Ç–∏–∫—É –∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é: —Ç–∞–∫ –º–Ω–µ –±—É–¥–µ—Ç –ª–µ–≥—á–µ –ø–æ–Ω—è—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–≥–æ.

4. –ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–µ–∂–ª–∏–≤—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –∏ –ø—Ä–æ—è–≤–ª–µ–Ω–∏–µ —É–≤–∞–∂–µ–Ω–∏—è –º–æ–≥—É—Ç –∏–º–µ—Ç—å –±–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.

5. –ò–∑–±–µ–≥–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Ä–µ—á–∏: —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞—Ç—Ä—É–¥–Ω–∏—Ç—å –º–Ω–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –¥–æ–Ω–µ—Å—Ç–∏.

6. –ó–∞–¥–∞–≤–∞–π—Ç–µ –ø–æ –æ–¥–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É –∑–∞ —Ä–∞–∑: –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –ª—É—á—à–µ –∑–∞–¥–∞–≤–∞—Ç—å –∏—Ö –ø–æ –æ–¥–Ω–æ–º—É, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –º–Ω–µ –¥–∞—Ç—å —á–µ—Ç–∫–∏–π –∏ —Ü–µ–ª–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç.

7. –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç: –ï—Å–ª–∏ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Å–≤—è–∑–∞–Ω —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ç–µ–º–æ–π, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä—É—é —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ø–æ–Ω—è—Ç—å, –æ —á–µ–º –≤—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç–µ.

8. –ò–∑–±–µ–≥–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤: –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤—Å–µ–º–∏ –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏ —á–∞—Å—Ç–æ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –∫–∞–∫ –∫—Ä–∏–∫ –∏ –º–æ–∂–µ—Ç –∑–∞—Ç—Ä—É–¥–Ω–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—É—é –±–µ—Å–µ–¥—É.

9. –ë—É–¥—å—Ç–µ —Ç–µ—Ä–ø–µ–ª–∏–≤—ã: —è —è–≤–ª—è—é—Å—å —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, –∏ –º–Ω–µ –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –û—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã –º–æ–≥—É—Ç –¥–ª–∏—Ç—å—Å—è –¥–æ 2 –º–∏–Ω—É—Ç.

10. –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /img

–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:
–ù–∞–ø–∏—à–∏ –º–Ω–µ —Ä–µ–∑—é–º–µ –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä.
–°–æ—á–∏–Ω–µ–Ω–∏–µ –Ω–∞ —Ç–µ–º—É —á—Ç–æ —Å–∏–º–≤–æ–ª–∏–∑–∏—Ä—É—é—Ç –≥–æ—Ä—ã –∏ –º–æ—Ä–µ –≤ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–µ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏–∑ —Ä—É—Å—Å–∫–æ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã.
–ù–∞–ø–∏—à–∏ —Ä–µ—Ü–µ–ø—Ç –¥—Ä–∞–Ω–∏–∫–æ–≤.
–û—Ç–ª–∏—á–∏–µ –±—É–ª–∞—Ç–∞ –æ—Ç –¥–∞–º–∞—Å—Å–∫–æ–π —Å—Ç–∞–ª–∏.

–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:
/img –ú–∏–ª—ã–π –∫–æ—Ç–∏–∫

–ï—Å–ª–∏ —Ç—ã –¥–æ—á–∏—Ç–∞–ª –¥–æ –∫–æ–Ω—Ü–∞ - —Ç—ã –º–æ–ª–æ–¥–µ—Ü, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–¥–∞–≤–∞—è –≤–æ–ø—Ä–æ—Å—ã, —è –ø–æ–º–æ–≥—É —Å–µ—Ä—å–µ–∑–Ω–æ —É–ø—Ä–æ—Å—Ç–∏—Ç—å —Ç–≤–æ—é –∂–∏–∑–Ω—å. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á–∞—Ç-–±–æ—Ç–∞ –º–æ–≥—É—Ç —ç—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
 –ñ–¥—É —Ç–µ–±—è –≤ —á–∞—Ç–µ, –º–æ–π –¥—Ä—É–≥.

–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–∏—à–∏—Ç–µ @AlexVladimirovichB""":
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–æ–±–ª–µ–º—ã",
            reply_markup=markup3
        )
    else:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="""–°–æ–≤–µ—Ç—É—é –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å –æ–±—â–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π.

1. –°–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∑–∞–¥–∞–≤–∞—Ç—å –º–Ω–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, —Ç–∞–∫ –∂–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ —è —Ä–∞–±–æ—Ç–∞—é –±—ã—Å—Ç—Ä–µ–µ

2. –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã –∏ —è—Å–Ω—ã: –∑–∞–¥–∞–≤–∞—è –≤–æ–ø—Ä–æ—Å, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –º–Ω–µ –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ.

3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –≥—Ä–∞–º–º–∞—Ç–∏–∫—É –∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é: —Ç–∞–∫ –º–Ω–µ –±—É–¥–µ—Ç –ª–µ–≥—á–µ –ø–æ–Ω—è—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–≥–æ.

4. –ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–µ–∂–ª–∏–≤—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –∏ –ø—Ä–æ—è–≤–ª–µ–Ω–∏–µ —É–≤–∞–∂–µ–Ω–∏—è –º–æ–≥—É—Ç –∏–º–µ—Ç—å –±–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.

5. –ò–∑–±–µ–≥–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Ä–µ—á–∏: —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞—Ç—Ä—É–¥–Ω–∏—Ç—å –º–Ω–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –¥–æ–Ω–µ—Å—Ç–∏.

6. –ó–∞–¥–∞–≤–∞–π—Ç–µ –ø–æ –æ–¥–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É –∑–∞ —Ä–∞–∑: –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –ª—É—á—à–µ –∑–∞–¥–∞–≤–∞—Ç—å –∏—Ö –ø–æ –æ–¥–Ω–æ–º—É, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –º–Ω–µ –¥–∞—Ç—å —á–µ—Ç–∫–∏–π –∏ —Ü–µ–ª–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç.

7. –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç: –ï—Å–ª–∏ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Å–≤—è–∑–∞–Ω —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ç–µ–º–æ–π, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä—É—é —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ø–æ–Ω—è—Ç—å, –æ —á–µ–º –≤—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç–µ.

8. –ò–∑–±–µ–≥–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤: –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤—Å–µ–º–∏ –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏ —á–∞—Å—Ç–æ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –∫–∞–∫ –∫—Ä–∏–∫ –∏ –º–æ–∂–µ—Ç –∑–∞—Ç—Ä—É–¥–Ω–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—É—é –±–µ—Å–µ–¥—É.

9. –ë—É–¥—å—Ç–µ —Ç–µ—Ä–ø–µ–ª–∏–≤—ã: —è —è–≤–ª—è—é—Å—å —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, –∏ –º–Ω–µ –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –û—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã –º–æ–≥—É—Ç –¥–ª–∏—Ç—å—Å—è –¥–æ 2 –º–∏–Ω—É—Ç.

10. –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /img

–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:
–ù–∞–ø–∏—à–∏ –º–Ω–µ —Ä–µ–∑—é–º–µ –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä.
–°–æ—á–∏–Ω–µ–Ω–∏–µ –Ω–∞ —Ç–µ–º—É —á—Ç–æ —Å–∏–º–≤–æ–ª–∏–∑–∏—Ä—É—é—Ç –≥–æ—Ä—ã –∏ –º–æ—Ä–µ –≤ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–µ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏–∑ —Ä—É—Å—Å–∫–æ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã.
–ù–∞–ø–∏—à–∏ —Ä–µ—Ü–µ–ø—Ç –¥—Ä–∞–Ω–∏–∫–æ–≤.
–û—Ç–ª–∏—á–∏–µ –±—É–ª–∞—Ç–∞ –æ—Ç –¥–∞–º–∞—Å—Å–∫–æ–π —Å—Ç–∞–ª–∏.

–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:
/img –ú–∏–ª—ã–π –∫–æ—Ç–∏–∫

–ï—Å–ª–∏ —Ç—ã –¥–æ—á–∏—Ç–∞–ª –¥–æ –∫–æ–Ω—Ü–∞ - —Ç—ã –º–æ–ª–æ–¥–µ—Ü, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–¥–∞–≤–∞—è –≤–æ–ø—Ä–æ—Å—ã, —è –ø–æ–º–æ–≥—É —Å–µ—Ä—å–µ–∑–Ω–æ —É–ø—Ä–æ—Å—Ç–∏—Ç—å —Ç–≤–æ—é –∂–∏–∑–Ω—å. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á–∞—Ç-–±–æ—Ç–∞ –º–æ–≥—É—Ç —ç—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
 –ñ–¥—É —Ç–µ–±—è –≤ —á–∞—Ç–µ, –º–æ–π –¥—Ä—É–≥.

–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–∏—à–∏—Ç–µ @AlexVladimirovichB""",
            reply_markup=markup3
        )

@bot.callback_query_handler(func=lambda call: call.data == "add_to_group")
def handle_subscribed_callback(call):
    if call.message.text == """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫–∞–∫ –æ–±—â–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º –≤ –≥—Ä—É–ø–ø–µ:

1. –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
2. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏ –≤—ã–¥–∞–π—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ–±—â–µ–Ω–∏–µ

3. –ò—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /gpt –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –µ–º—É –≤–æ–ø—Ä–æ—Å.
–ù–∞–ø—Ä–∏–º–µ—Ä:
/gpt –ö–∞–∫ –¥–µ–ª–∞?

3. –ß—Ç–æ–±—ã —Å–≥–µ–Ω–∏—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /img –∑–∞–ø—Ä–æ—Å
–ù–∞–ø—Ä–∏–º–µ—Ä:
/img –ö–∞—Ä—Ç–∏–Ω–∞ –º–∞—Å–ª–æ–º

–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–∏—à–∏—Ç–µ @AlexVladimirovichB""":
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–æ–±–ª–µ–º—ã",
            reply_markup=markup3
        )
    else:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="""–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫–∞–∫ –æ–±—â–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º –≤ –≥—Ä—É–ø–ø–µ:

1. –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
2. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏ –≤—ã–¥–∞–π—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ–±—â–µ–Ω–∏–µ

3. –ò—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /gpt –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –µ–º—É –≤–æ–ø—Ä–æ—Å.
–ù–∞–ø—Ä–∏–º–µ—Ä:
/gpt –ö–∞–∫ –¥–µ–ª–∞?

3. –ß—Ç–æ–±—ã —Å–≥–µ–Ω–∏—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /img –∑–∞–ø—Ä–æ—Å
–ù–∞–ø—Ä–∏–º–µ—Ä:
/img –ö–∞—Ä—Ç–∏–Ω–∞ –º–∞—Å–ª–æ–º

–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–∏—à–∏—Ç–µ @AlexVladimirovichB""",
            reply_markup=markup3
        )

@bot.callback_query_handler(func=lambda call: call.data == "what_are_tokens")
def handle_subscribed_callback(call):
    if call.message.text == """–¢–æ–∫–µ–Ω—ã —ç—Ç–æ —Ç–æ–ø–ª–∏–≤–æ –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏

–¢–æ–∫–µ–Ω—ã —Ç—Ä–∞—Ç—è—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ. –ò—Å—Ö–æ–¥—è –∏–∑ —Ä–∞—Å—á–µ—Ç–∞ –≤–æ–ø—Ä–æ—Å+–æ—Ç–≤–µ—Ç

1 —Å–∏–º–≤–æ–ª - 1 —Ç–æ–∫–µ–Ω

–û–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - 500 —Ç–æ–∫–µ–Ω–æ–≤

–¢–æ–∫–µ–Ω—ã –ø—Ä–∏–¥—É–º–∞–ª–∏ –Ω–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞, –∞ OpenAI

–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–∏—à–∏—Ç–µ @AlexVladimirovichB""":
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–æ–±–ª–µ–º—ã",
            reply_markup=markup3
        )
    else:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="""–¢–æ–∫–µ–Ω—ã —ç—Ç–æ —Ç–æ–ø–ª–∏–≤–æ –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏

–¢–æ–∫–µ–Ω—ã —Ç—Ä–∞—Ç—è—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ. –ò—Å—Ö–æ–¥—è –∏–∑ —Ä–∞—Å—á–µ—Ç–∞ –≤–æ–ø—Ä–æ—Å+–æ—Ç–≤–µ—Ç

1 —Å–∏–º–≤–æ–ª - 1 —Ç–æ–∫–µ–Ω

–û–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - 500 —Ç–æ–∫–µ–Ω–æ–≤

–¢–æ–∫–µ–Ω—ã –ø—Ä–∏–¥—É–º–∞–ª–∏ –Ω–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞, –∞ OpenAI

–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–∏—à–∏—Ç–µ @AlexVladimirovichB""",


            reply_markup=markup3
        )

@bot.callback_query_handler(func=lambda call: call.data == "communication_modes")
def handle_subscribed_callback(call):
    if call.message.text == """–í –±–æ—Ç–µ –µ—Å—Ç—å 14 —Ä–æ–ª–µ–π. –ò—Å—Ö–æ–¥—è –∏–∑ –≤–∞—à–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –¥–ª—è –≤–∞—Å

–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–∏—à–∏—Ç–µ @AlexVladimirovichB""":
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–æ–±–ª–µ–º—ã",
            reply_markup=markup3
        )
    else:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="""–í –±–æ—Ç–µ –µ—Å—Ç—å 14 —Ä–æ–ª–µ–π. –ò—Å—Ö–æ–¥—è –∏–∑ –≤–∞—à–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –¥–ª—è –≤–∞—Å

–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–∏—à–∏—Ç–µ @AlexVladimirovichB""",
            reply_markup=markup3
        )

@bot.callback_query_handler(func=lambda call: call.data == "payment_problems")
def handle_subscribed_callback(call):
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"–ü—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–∞—Ç—å –ø–æ –¥–≤—É–º –ø—Ä–∏—á–∏–Ω–∞–º:   \n1. –í—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —Ç–æ–∫–µ–Ω—ã \n2. –í—ã –Ω–µ –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É' \n–û–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ–ø–ª–∞—Ç—É, –µ—Å–ª–∏ –ø–æ—Ç–µ—Ä—è–ª–∏ - –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ   \n–í –∏–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –ø–∏—à–∏—Ç–µ @AlexVladimirovichB",
            reply_markup=markup13
        )

@bot.callback_query_handler(func=lambda call: call.data == "üîÑ–Æ–º–∞–Ω–∏ —Ç–æ–∫–µ–Ω—ã")
def handle_subscribed_callback(call):
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f'–í—ã –µ—â–µ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —Ç–æ–∫–µ–Ω—ã!',
            reply_markup=markup14
        )




@bot.callback_query_handler(func=lambda call: call.data.startswith("check_paymnent:"))
def handle_subscribed_callback(call):
    payment_id = call.data.split(':')[1]
    chat_id = str(call.message.chat.id)

    headers = {
        'x-api-key': API_QRIPT
    }
    payload = {}
    url = f"https://api.nowpayments.io/v1/payment/{payment_id}"
    json_response = requests.request("GET", url, headers=headers, data=payload)
    response = json.loads(json_response.text)

    if response['payment_status'] == 'finished':
        markup17 = InlineKeyboardMarkup()
        markup17.row(InlineKeyboardButton("‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back1"))
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="‚úÖ–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!", reply_markup=markup17)
    else:
        markup17 = InlineKeyboardMarkup()
        markup17.row(InlineKeyboardButton("üîÑ–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_paymnent:{payment_id}"))
        markup17.row(InlineKeyboardButton("‚Ü©Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back1"))
        if call.message.text == "–í—ã –µ—â–µ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —Ç–æ–∫–µ–Ω—ã!":
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="–í—ã –µ—â–µ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —Ç–æ–∫–µ–Ω—ã!!!", reply_markup=markup17)
        else:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="–í—ã –µ—â–µ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —Ç–æ–∫–µ–Ω—ã!", reply_markup=markup17)

# @bot.callback_query_handler(func=lambda call: call.data == "69—Ä")
# def handle_subscribed_callback(call):
#
#     title = '–û–ø–ª–∞—Ç–∞'
#     description = '50000 —Ç–æ–∫–µ–Ω–æ–≤'
#     # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
#     invoice_payload = '69—Ä'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
#     # –ü—Ä–æ–≤–∞–π–¥–µ—Ä—Å–∫–∏–π —Ç–æ–∫–µ–Ω YooKassa
#     provider_token = YOOKASSA_SECRET_KEY  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á YooKassa
#     # –í–∞–ª—é—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞
#     currency = 'RUB'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É –Ω—É–∂–Ω—É—é –≤–∞–ª—é—Ç—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, 'RUB' –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ä—É–±–ª–µ–π
#     prices = [LabeledPrice(label='Working Time Machine', amount=6900)]
#     bot.send_invoice(
#         chat_id=call.from_user.id,
#         title=title,
#         description=description,
#         invoice_payload=invoice_payload,
#         provider_token=provider_token,
#         currency=currency,
#         prices=prices,
#     )
# @bot.shipping_query_handler(func=lambda query: True)
# def handle_shipping_query(query):
#     # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
#     pass
#
# @bot.pre_checkout_query_handler(func=lambda query: True)
# def handle_pre_checkout_query(query):
#     # –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ª—é–±—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–¥ –µ—ë –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
#     bot.answer_pre_checkout_query(pre_checkout_query_id=query.id, ok=True)
#
#
# @bot.message_handler(content_types=['successful_payment'])
# def handle_successful_payment(message):
#     # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞, –∫–æ–≥–¥–∞ –æ–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è
#     # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
#     user_id = message.from_user.id
#     # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
#     successful_payment = message.successful_payment
#     total_amount = successful_payment.total_amount
#     currency = successful_payment.currency
#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
#     cursor = conn.cursor()
#     # –í—ã–ø–æ–ª–Ω—è–µ–º SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è tokens –≤ —Ç–∞–±–ª–∏—Ü–µ Tg_User
#     # –°—É–º–º–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ tokens —Å –¥–æ–±–∞–≤–ª—è–µ–º—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º tokens_to_add
#     cursor.execute("UPDATE main_tg_user SET balance = balance + %s WHERE telegram_id = %s", (50000, user_id))
#     # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
#     conn.commit()
#     success_message = f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ {total_amount / 100} {currency} –∏ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–∏ —Ç–æ–∫–µ–Ω—ã."
#     bot.send_message(chat_id=message.chat.id, text=success_message,reply_markup=markup4)

@bot.callback_query_handler(func=lambda call: call.data == "valute")
def handle_subscribed_callback(call):


    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="–ö–∞–∂–¥—ã–π —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å —Ç—Ä–∞—Ç–∏—Ç —Ç–æ–∫–µ–Ω—ã OpenAI \n–¢–æ–∫–µ–Ω—ã —ç—Ç–æ —Ç–æ–ø–ª–∏–≤–æ –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ \n–°—Ç–æ–∏–º–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –µ–≥–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ \n1 —Å–∏–º–≤–æ–ª —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ 1 —Ç–æ–∫–µ–Ω \n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∏—Ö –ø–æ–¥ —Å–≤–æ–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏\n"
                     "üëá–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—Éüëá", reply_markup=markup5)
@bot.callback_query_handler(func=lambda call: call.data == "faq")
def handle_subscribed_callback(call):
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–æ–±–ª–µ–º—ã",
                     reply_markup=markup9)
@bot.callback_query_handler(func=lambda call: call.data == "return")
def handle_subscribed_callback(call):

    user_id = call.from_user.id
    bot.send_message(
        user_id,
        "üëáüöÄ–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ \n"
                     "‚îú 10.000 —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ 22—Ä—É–±.\n"
                     "‚îú 50.000 —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ 69—Ä—É–±.\n"
                     "üéØ120.000 —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ 139—Ä—É–±. \n"
                     "‚îú 300.000 —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ 259—Ä—É–±. \n"
                     '‚îú 1.000.000 —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ 699—Ä—É–±. \n'
                     '‚îî 2.500.000 —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ 1399—Ä—É–±. \n'
                     'üëá–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Çüëá \n',
        reply_markup=markup6)

@bot.message_handler(func=lambda message: message.text == '‚ôªÔ∏è–ü–æ–ª–µ–∑–Ω–æ–µ')
def handle_reply(message):
    if block(message):
        pass
    elif block2hrs(message):
        pass
    else:
        user_id = message.from_user.id

        bot.send_message(user_id,
                "‚úçÔ∏è –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å\n\n"
                "üí∏ –ö—É–ø–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É \"–ö—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã\" \n\n"
                "üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏—Ç—å 3000 —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–µ \"–î—Ä—É–∑—å—è\"\n\n"
                "üéÅ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª —Å–ø–æ–Ω—Å–æ—Ä–∞, –ø–æ–ª—É—á–∏–≤ 3000 —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–µ \"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã\"\n\n"
                "üëõ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–µ \"–ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤\"\n\n",
                         reply_markup=markup2)

@bot.message_handler(func=lambda message: message.text == 'üë§–ü—Ä–æ—Ñ–∏–ª—å')
def handle_reply(message):
    if block(message):
        pass
    elif block2hrs(message):
        pass
    else:
        user_id = message.from_user.id
        user_name = message.from_user.username
        name = message.from_user.first_name

        cursor = conn.cursor()
        cursor.execute("SELECT balance FROM main_tg_user WHERE telegram_id = %s", (user_id,))
        result = str(cursor.fetchone()[0])
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM main_tg_user WHERE telegram_id = %s", (user_id,))
        conn.commit()
        result1 = str(cursor.fetchone()[0])
        cursor = conn.cursor()
        cursor.execute(
            "SELECT COUNT(*) AS count_invites FROM referral_system WHERE invited_by = %s",
            (user_id,)
        )
        result2 = cursor.fetchone()[0]
        bot.send_message(user_id,
                 f"üë§ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}\n"
                 f"‚îú –í–∞—à —é–∑–µ—Ä–Ω–µ–π–º: {user_name}\n"
                 f"‚îî –í–∞—à id: {user_id}\n\n"
                 f"üëõ–ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤: {result}\n\n"
                 f"üë•–î—Ä—É–∑–µ–π –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {result2}\n\n"
                 f"üó£–†–æ–ª—å: {result1}\n",
            reply_markup=markup4)

@bot.message_handler(func=lambda message: message.text == '‚óÄÔ∏è–ù–∞–∑–∞–¥')
def handle_reply(message):
    if block(message):
        pass
    elif block2hrs(message):
        pass
    else:
        user_id = message.from_user.id

        bot.send_message(user_id, "ü§ñ –ü—Ä–∏–≤–µ—Ç, {}! –Ø –±–æ—Ç ChatGPT –∏ DALL-E! –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã."
                                  "–ë–æ—Ç –∏–Ω–æ–≥–¥–∞ –º–æ–∂–µ—Ç –≥—Ä—É–∑–∏—Ç—å –æ—Ç–≤–µ—Ç "
                                  "–≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç. –í—Å–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ OpenAI! "
                                  "–°–æ–≤–µ—Ç—ã –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:\n\n"
                                  "‚Äì –ó–∞–¥–∞–≤–∞–π—Ç–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã, —Ä–∞—Å–ø–∏—Å—ã–≤–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–µ–µ.\n"
                                  "‚Äì –ù–µ –ø–∏—à–∏—Ç–µ –µ—Ä—É–Ω–¥—É –∏–Ω–∞—á–µ –æ–¥–µ—Ä–∂–∏—Ç–µ –µ—ë –∂–µ –≤ –æ—Ç–≤–µ—Ç.\n\n"
                                  "–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤/–∑–∞–ø—Ä–æ—Å–æ–≤:\n\n"
                                  "~ –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 7 * 8?\n"
                                  "~ –ö–æ–≥–¥–∞ –Ω–∞—á–∞–ª–∞—Å—å –í—Ç–æ—Ä–∞—è –ú–∏—Ä–æ–≤–∞—è?\n"
                                  "~ –ù–∞–ø–∏—à–∏ –∫–æ–¥ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –Ω–∞ Python\n"
                                  "~ –ù–∞–ø–∏—à–∏ —Å–æ—á–∏–Ω–µ–Ω–∏–µ –∫–∞–∫ —è –ø—Ä–æ–≤–µ–ª –ª–µ—Ç–æ\n"
                         "~ /img –ú–∏–ª—ã–π –∫–æ—Ç–∏–∫\n\n".format(message.from_user.first_name),
                         reply_markup=markup1)


@bot.message_handler(func=lambda message: message.text == 'üë©‚Äçüéì–ü–æ–º–æ—â—å' or message.text == '‚ùìFAQ')
def handle_reply(message):
    if block(message):
        pass
    elif block2hrs(message):
        pass
    else:
        user_id = message.from_user.id

        bot.send_message(user_id,
                "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–æ–±–ª–µ–º—ã",
                         reply_markup=markup3)


@bot.message_handler(func=lambda message: message.text == 'üéÅ–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã')
def handle_reply(message):
    cursor = conn.cursor()
    cursor.execute('SELECT group_code FROM groups WHERE group_type = %s', ('promo_chanel',))
    channel_usernames = cursor.fetchall()
    user_id = message.from_user.id
    is_subscribed_to_all = True
    for channel_username in channel_usernames:
        user_info = bot.get_chat_member(channel_username, user_id)
        if user_info.status not in ["member", "administrator", "creator"]:
            is_subscribed_to_all = False
            break

    if is_subscribed_to_all:
        bot.send_message(
            user_id,
            "–¢—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª –≤—Å–µ –±–æ–Ω—É—Å—ã", reply_markup=markup14)
    else:
        markup = InlineKeyboardMarkup()

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è

        for channel_username in channel_usernames:
            subscribe_button = InlineKeyboardButton(text=str(bot.get_chat(channel_username).title),
                                                    url=str(get_channel_link(channel_username)))  # cc—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã
            markup.add(subscribe_button)
        subscribe_btn1 = InlineKeyboardButton("‚úÖ–ü–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="subscribed2")
        markup.add(subscribe_btn1)

        bot.send_message(
            user_id,
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å —Ç–æ–∫–µ–Ω–∞ 3000, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == 'üëõ–ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤')
def handle_reply(message):
    if block(message):
        pass
    elif block2hrs(message):
        pass
    else:
        user_id = message.from_user.id
        cursor = conn.cursor()
        cursor.execute("SELECT balance FROM main_tg_user WHERE telegram_id = %s", (user_id,))
        result = str(cursor.fetchone()[0])

        bot.send_message(user_id,
                "–û—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: " + result)

@bot.message_handler(func=lambda message: message.text == 'üöÄ–ö—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã')
def handle_reply(message):
    if block(message):
        pass
    elif block2hrs(message):
        pass
    else:
        user_id = message.from_user.id

        bot.send_message(user_id,
                "–ö–∞–∂–¥—ã–π —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å —Ç—Ä–∞—Ç–∏—Ç —Ç–æ–∫–µ–Ω—ã OpenAI \n–¢–æ–∫–µ–Ω—ã —ç—Ç–æ —Ç–æ–ø–ª–∏–≤–æ –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ \n–°—Ç–æ–∏–º–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –µ–≥–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ \n1 —Å–∏–º–≤–æ–ª —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ 1 —Ç–æ–∫–µ–Ω \n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∏—Ö –ø–æ–¥ —Å–≤–æ–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏\n"
                "üëá–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—Éüëá", reply_markup=markup18)




@bot.pre_checkout_query_handler(func=lambda query: True)
def process_pre_checkout_query(query):
    bot.answer_pre_checkout_query(query.id, ok=True)

@bot.message_handler(content_types=['successful_payment'])
def successful_payment(message):
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞, –∫–æ–≥–¥–∞ –æ–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è
    # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    user_id = message.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
    amount_paid = int(message.successful_payment.total_amount)



    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    cursor = conn.cursor()

    if int(amount_paid) == 25900:
        amount_paid = "üéØ259"
    else:
        amount_paid = int(amount_paid) // 100
    query = "SELECT tokens FROM prices WHERE money = %s AND group_type = %s"
    cursor.execute(query, (str(amount_paid), 'rub'))
    result = cursor.fetchone()
    # –í—ã–ø–æ–ª–Ω—è–µ–º SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è tokens –≤ —Ç–∞–±–ª–∏—Ü–µ Tg_User
    # –°—É–º–º–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ tokens —Å –¥–æ–±–∞–≤–ª—è–µ–º—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º tokens_to_add
    #tokens
    cursor.execute("UPDATE main_tg_user SET balance = balance + %s WHERE telegram_id = %s", (int(result[0]), user_id))
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn.commit()
    success_message = f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞—Ç–∏–ª–∏ {amount_paid} —Ä—É–±–ª–µ–π –∏ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–∏ {result[0]} —Ç–æ–∫–µ–Ω–æ–≤."
    bot.send_message(chat_id=message.chat.id, text=success_message, reply_markup=markup4)


@bot.message_handler(content_types=["text"])
def repeat_all_messages(message):
    if message.text.startswith('/img'):
        if block(message):
            pass
        elif block2hrs(message):
            pass
        else:
            msg = bot.reply_to(message,
                               "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ , —è —Å–æ–∑–¥–∞—é –∫–∞—Ä—Ç–∏–Ω—Éüòå")
            client = gpt_key()

            cursor = conn.cursor()
            query = "SELECT balance FROM main_tg_user WHERE telegram_id = %s;"
            cursor.execute(query, (message.from_user.id,))

            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
            result = cursor.fetchone()[0]
            if int(result) < 500:
                bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=msg.message_id,
                    text="–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –≤—Å–µ —Å–≤–æ–∏ —Ç–æ–∫–µ–Ω—ã   \n–ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å üëá",
                    reply_markup=markup16)
            else:
                update_tokens_query = "UPDATE main_tg_user SET balance = balance - %s WHERE telegram_id = %s;"
                cursor.execute(update_tokens_query, (500, str(message.from_user.id)))
                # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–º–∏—Ç, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                conn.commit()
                try:
                    response = client.images.generate(
                        model="dall-e-2",
                        prompt=message.text,
                        size="256x256",
                        quality="standard",
                        n=1,
                    )

                    image_url = response.data[0].url

                    bot.send_photo(
                        chat_id=message.chat.id,
                        photo=image_url,
                    )
                except:
                    bot.send_message(chat_id=message.chat.id, text='Dall-e –Ω–µ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å')
    elif message.text.startswith('/gpt') or message.chat.type == 'private':
        if block(message):
            pass
        elif block2hrs(message):
            pass
        else:
            print(message.chat.type)
            client = gpt_key()
            chat_id = message.chat.id
            message.text = message.text.replace('/gpt','')
            msg = bot.reply_to(message,
                             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ , —è –∏—â—É –æ—Ç–≤–µ—Çüòå")
            cursor = conn.cursor()


            role = "SELECT name FROM main_tg_user WHERE telegram_id = %s;"
            cursor.execute(role, (str(message.from_user.id),))
            role = cursor.fetchone()



            stream = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                {"role": "system", "content": f"–í–µ–¥–∏ —Å–µ–±—è –∫–∞–∫ {role}"},
                {"role": "user", "content": message.text},
            ],
                stream=True,
            )
            text = ""
            for chunk in stream:
                if chunk.choices[0].delta.content is not None:
                    text = text + chunk.choices[0].delta.content









            query = "SELECT balance FROM main_tg_user WHERE telegram_id = %s;"
            cursor.execute(query, (message.from_user.id,))

            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
            result = cursor.fetchone()[0]
            if int(result) < len(text):
                bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=msg.message_id,
                    text="–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –≤—Å–µ —Å–≤–æ–∏ —Ç–æ–∫–µ–Ω—ã   \n–ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å üëá", reply_markup=markup16)

            else:
                update_tokens_query = "UPDATE main_tg_user SET balance = balance - %s WHERE telegram_id = %s;"
                cursor.execute(update_tokens_query, (str(len(text)), str(message.from_user.id)))
                # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–º–∏—Ç, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                conn.commit()
                response_text = text

                bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=msg.message_id,
                    text=response_text)


# def main():
#     while True:
#         try:
#             bot.polling(none_stop=True)  # –ü–∞—Ä–∞–º–µ—Ç—Ä none_stop=True –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
#         except Exception as e:
#             print(f"–û—à–∏–±–∫–∞: {e}")
#             # –û–∂–∏–¥–∞–Ω–∏–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
#             time.sleep(5)  # –ü–æ–¥–æ–∂–¥–∞—Ç—å 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
#
# if __name__ == '__main__':
#     main()
bot.polling(none_stop=True)  # –ü–∞—Ä–∞–º–µ—Ç—Ä none_stop=True –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
